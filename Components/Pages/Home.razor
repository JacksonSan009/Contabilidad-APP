@page "/"
@using System.Globalization
@using System.Text.RegularExpressions
@using System.Diagnostics
@using Contabilidad_APP.Components.Models
@using Contabilidad_APP.Components.Models.Util


<h1 class="text-center">Cuentas del Día</h1>

<div class="container ">

    <div class="progress">
        <div class="progress-bar" role="progressbar"
             style="width:@progressValue%;"
             aria-valuenow="@progressValue"
             aria-valuemin="0"
             aria-valuemax="100">
            @progressValue%
        </div>
    </div>


    <p class="fw-bold fs-1 my-1">
        Gastos disponibles diarios
    </p>
</div>

<div class="container">

    <div class="form-floating ">

        <div class=" my-3 ">
            <InputText class="form-control " type="text" id="valueInput" @bind-Value="rawAmount" placeholder="Valor" />
        </div>

        <div class=" my-3 ">
            <InputText class="form-control" type="text" id="spendInput" @bind-Value="description" placeholder="Gasto" />
        </div>
    </div>

    <div class="d-flex justify-content-center my-4">
        <button class="btn btn-primary w-75" @onclick="AddDebit">ADD</button>
    </div>
</div>

<h3 class="text-center">Lista de Débitos:</h3>
@if (debits.Any())
{
    <div class="list-group ">
        @foreach (var Debit in debits)
        {
            <a href="#" class="list-group-item fade show">
                <div>
                    <!-- Amount -->
                    <p class="fw-bold fs-1 my-1">@CurrencyFormatter.FormatToCop(Debit.Amount.ToString())</p>

                    <!-- Description -->
                    <p class="text-muted fs-6 fst-italic my-0">@Debit.Description</p>
                </div>

                <div class="d-flex flex-column justify-content-end">
                    <p class=" text-end mb-0">@Debit.Date</p>
                </div>
            </a>


        }
    </div>
}

@code {
    private string rawAmount { get; set; } = "";
    private string description { get; set; } = "";
    private decimal progressValue { get; set; } = 0;
    private decimal limitExpends { get; set; } = 50000;

    private List<Debit> debits { get; set; } = new List<Debit>();
    private Regex regex = new Regex(@"^\$?(\d{1,3}(,\d{3})*|(\d+))(\.\d{0,2})?$");
    // regex.IsMatch(input) ?
        
    private void AddDebit()
    {
        if (rawAmount != "")
        {
            debits.Add(new Debit(decimal.Parse(rawAmount), DateTime.Now, description));
            cleanForm();
        }
        else
        {
            cleanForm();
        }

        this.progressValue = (calculateExpends() / limitExpends) * 100;
    }

    private decimal calculateExpends()
    {
        return debits.Sum(x => x.Amount);
    }

    private void cleanForm()
    {
        rawAmount = "";
        description = "";
    }
}
